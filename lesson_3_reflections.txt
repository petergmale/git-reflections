# When would you want to use a remote repository rather than keeping all your work local?
- when sharing work or co-collaborating
- when you work from more than one computer

# Why might you want to always pull changes manually rather than having Git automatically 
# stay up-to-date with your remote repository?
- may be difficult for your local development if the state of the other files change; they could
  impact your working environment.
- your local working files might be dependent or have dependencies on the repo master, which
  could be problematic.

# Describe the differences between forks, clones, and branches. When would you use one 
# instead of another?
- 'forks' are a GitHub mechanism to clone one GitHub repository to another.
- 'clones' are a Git mechanism to copy a remote repository to a local space or to clone a local 
  repository to another local space.
- 'branching' is a mechanism to diverge off of one branch to another - branch being the line
  of commits

# What is the benefit of having a copy of the last known state of the remote stored locally?
- you can review all changes of the remote locally
- you can perform the merge later and review if your master has any dependencies on remote.

# How would you collaborate without using Git or GitHub? What would be easier, and what would 
# be harder?
- would need another vcs most likely. If not, then some cloud-based infrastructure.
- Git/GitHub would be much easier as these tools are designed for collaboration

# When would you want to make changes in a separate branch rather than directly in master? 
# What benefits does each approach have?
- seems beneficial for the master branch to be 'release' worthy. Starting a feature or bug
  fix in a branch allows the freedom to work worry free that you are not affecting the master.
- separate branches can help segregate work into logical commits
- creating a branch seems to allow for better collaboration, as a new feature or bug fix can be
  shared with others from that branch.
- there is a complexity price to pay for separate branches; maintaining and merging differences
  with a remote repo
