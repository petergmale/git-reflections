# What happens when you initialize a repository? Why do you need to do it?
- creates a '.git' file with metadata
- this is a way git knows what to track

# How is the staging area different from the working directory and the repository? 
# What value do you think it offers?
- like a local repository that holds transition changes?
- allows you to collect logical changes.

# How can you use the staging area to make sure you have one commit per logical change?
- only stage files belonging to a logical change.

# What are some situations when branches would be helpful in keeping your history organized? 
# How would branches help?
- git log will show history of that branch, keeping history organized. Not sure about when
  it gets merged tho.
- branches allow you to switch to a new focus of changes. Later, that branch can be merged.

# How do the diagrams help you visualize the branch structure?
- by following the diagrams, you can visualize the reachability and path of a branch commit

# What is the result of merging two branches together? 
# Why do we represent it in the diagram the way we do?
- the specified branch is merged (combined) with the current branch. The common commit and the 2
  branch commits are used to determine the final merging.
- the branch is shown 'split' from the 'master' as other changes are being added. The 'merge'
  shows the 2 branches joined together, as this represents the notion that the changes have
  been combined and their historys are now 'linked'.

# What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
- pro: majority of merges can be automatically done. When no conflicts.
- con: auto merges can have functional dependencies without having line conflicts; when
       this type of merge happens, it can appear to be ok, but may have bug side-effects.


#
# Covered commands:
#
git add <file>                      # add <file> to staging area (ready for commit)
git commit                          # commit file(s) in staging area to repository
git status                          # status of the working dir. Shows staged too
git diff                            # diff modified files in working dir
git diff [id]                       # diff files in working dir with id 
git diff --staged id1 id2           # diff id's in staging area to repo
git diff --staged                   # diff modified files in staging area with repo
git show id                         # like diff, but only changes for particular id
git reset [file...]                 # undo 'git add'; modified files go back to working dir
git reset --hard                    # undo changes. Careful, because deletes changes. Permanent
git checkout master                 # switch to branch called master
git log --graph --oneline <branch1> <branch2> # pretty text view of commit history (no detail)
git branch                          # list available branches (current has '*')
git branch -d branch                # delete branch name
git checkout -b <new_branch>        # create new branch AND switch to that branch 
git merge <branch>                  # merge branch into current branch (can specify current too)
